# Entity
type Gene {
  id: Int
  geneId: String
  omimId: String
  ensemblId: String
  geneSymbol: String
  cosmicSymbol: String
  geneName: String
  status: String
  refSeqAccession: String
  chromosomeLocation: String

  drugInteractions: [Drug]
  tissueType: [Tissue]
  cellSpecificMarkers: [Cell]
  diseaseInteractions: [Disease]
  pathways: [Pathway]
}

type Genes {
  totalCount: Int
  edges: [GeneEdges]
  pageInfo: GenePageInfo
}

type GeneEdges {
  node: Gene
  cursor: Int
}

type GenePageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

extend type Query {
  gene(id: Int, geneId: String, geneSymbol: String): Gene
  genes(
    limit: Int
    after: Int
    orderBy: OrderByGeneInput
    filter: FilterGeneInput
  ): Genes
}

input FilterGeneInput {
  searchText: String
  geneId: String
  geneSymbol: String
  geneName: String

  isActive: Boolean
}

input OrderByGeneInput {
  column: String
  order: String
}

extend type Mutation {
  addGene(input: AddGeneInput!): Gene
  editGene(input: EditGeneInput!): Gene
  deleteGene(id: Int!): Gene
}

input AddGeneInput {
  geneId: String
  omimId: String
  ensemblId: String
  geneSymbol: String
  cosmicSymbol: String
  geneName: String
  status: String
  refSeqAccession: String
  chromosomeLocation: String
}

input EditGeneInput {
  id: Int!
  geneId: String
  omimId: String
  ensemblId: String
  geneSymbol: String
  cosmicSymbol: String
  geneName: String
  status: String
  refSeqAccession: String
  chromosomeLocation: String
}

extend type Subscription {
  geneUpdated(filter: FilterGeneInput): UpdateGenePayload
}

type UpdateGenePayload {
  mutation: String!
  node: Gene
}
