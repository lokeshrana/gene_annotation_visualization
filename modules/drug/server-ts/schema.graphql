# Entity
type Drug {
  id: Int
  entrezId: String
  drugConceptId: String
  pmid: String
  geneName: String
  geneClaimName: String
  interactionClaimSource: String
  interactionType: String
  drugClaimPrimaryName: String
  drugClaimName: String
  drugName: String
  interactionGroupScore: String
}

type Drugs {
  totalCount: Int
  edges: [DrugEdges]
  pageInfo: DrugPageInfo
}

type DrugEdges {
  node: Drug
  cursor: Int
}

type DrugPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

extend type Query {
  drug(id: Int!): Drug
  drugs(
    limit: Int
    after: Int
    orderBy: OrderByDrugInput
    filter: FilterDrugInput
  ): Drugs
}

input FilterDrugInput {
  searchText: String
  isActive: Boolean
}

input OrderByDrugInput {
  column: String
  order: String
}

extend type Mutation {
  addDrug(input: AddDrugInput!): Drug
  editDrug(input: EditDrugInput!): Drug
  deleteDrug(id: Int!): Drug
}

input AddDrugInput {
  entrezId: String
  drugConceptId: String
  pmid: String
  geneName: String
  geneClaimName: String
  interactionClaimSource: String
  interactionType: String
  drugClaimPrimaryName: String
  drugClaimName: String
  drugName: String
  interactionGroupScore: String
}

input EditDrugInput {
  id: Int!
  entrezId: String
  drugConceptId: String
  pmid: String
  geneName: String
  geneClaimName: String
  interactionClaimSource: String
  interactionType: String
  drugClaimPrimaryName: String
  drugClaimName: String
  drugName: String
  interactionGroupScore: String
}

extend type Subscription {
  drugUpdated(filter: FilterDrugInput): UpdateDrugPayload
}

type UpdateDrugPayload {
  mutation: String!
  node: Drug
}
